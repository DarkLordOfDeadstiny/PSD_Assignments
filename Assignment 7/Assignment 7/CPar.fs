// Implementation file for parser generated by fsyacc
module CPar
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "CPar.fsy"

(*	File MicroC/CPar.fsy 
	Parser specification for micro-C, a small imperative language
	sestoft@itu.dk * 2009-09-29
	No (real) shift/reduce conflicts thanks to Niels Kokholm.
*)

open Absyn

let compose1 f (g, s) = ((fun x -> g(f(x))), s)
let nl = CstI 10

# 19 "CPar.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | LPAR
  | RPAR
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | SEMI
  | COMMA
  | ASSIGN
  | AMP
  | PREINC
  | PREDEC
  | NOT
  | SEQOR
  | SEQAND
  | EQ
  | NE
  | GT
  | LT
  | GE
  | LE
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD
  | CHAR
  | ELSE
  | IF
  | QMARK
  | COLON
  | INT
  | NULL
  | PRINT
  | PRINTLN
  | RETURN
  | VOID
  | WHILE
  | FOR
  | CSTSTRING of (string)
  | NAME of (string)
  | CSTINT of (int)
  | CSTBOOL of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_SEMI
    | TOKEN_COMMA
    | TOKEN_ASSIGN
    | TOKEN_AMP
    | TOKEN_PREINC
    | TOKEN_PREDEC
    | TOKEN_NOT
    | TOKEN_SEQOR
    | TOKEN_SEQAND
    | TOKEN_EQ
    | TOKEN_NE
    | TOKEN_GT
    | TOKEN_LT
    | TOKEN_GE
    | TOKEN_LE
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_MOD
    | TOKEN_CHAR
    | TOKEN_ELSE
    | TOKEN_IF
    | TOKEN_QMARK
    | TOKEN_COLON
    | TOKEN_INT
    | TOKEN_NULL
    | TOKEN_PRINT
    | TOKEN_PRINTLN
    | TOKEN_RETURN
    | TOKEN_VOID
    | TOKEN_WHILE
    | TOKEN_FOR
    | TOKEN_CSTSTRING
    | TOKEN_NAME
    | TOKEN_CSTINT
    | TOKEN_CSTBOOL
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Topdecs
    | NONTERM_Topdec
    | NONTERM_Vardec
    | NONTERM_Vardesc
    | NONTERM_Fundec
    | NONTERM_Paramdecs
    | NONTERM_Paramdecs1
    | NONTERM_Block
    | NONTERM_StmtOrDecSeq
    | NONTERM_Stmt
    | NONTERM_StmtM
    | NONTERM_StmtU
    | NONTERM_Expr
    | NONTERM_ExprNotAccess
    | NONTERM_AtExprNotAccess
    | NONTERM_Access
    | NONTERM_Exprs
    | NONTERM_Exprs1
    | NONTERM_Const
    | NONTERM_Type

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | LPAR  -> 1 
  | RPAR  -> 2 
  | LBRACE  -> 3 
  | RBRACE  -> 4 
  | LBRACK  -> 5 
  | RBRACK  -> 6 
  | SEMI  -> 7 
  | COMMA  -> 8 
  | ASSIGN  -> 9 
  | AMP  -> 10 
  | PREINC  -> 11 
  | PREDEC  -> 12 
  | NOT  -> 13 
  | SEQOR  -> 14 
  | SEQAND  -> 15 
  | EQ  -> 16 
  | NE  -> 17 
  | GT  -> 18 
  | LT  -> 19 
  | GE  -> 20 
  | LE  -> 21 
  | PLUS  -> 22 
  | MINUS  -> 23 
  | TIMES  -> 24 
  | DIV  -> 25 
  | MOD  -> 26 
  | CHAR  -> 27 
  | ELSE  -> 28 
  | IF  -> 29 
  | QMARK  -> 30 
  | COLON  -> 31 
  | INT  -> 32 
  | NULL  -> 33 
  | PRINT  -> 34 
  | PRINTLN  -> 35 
  | RETURN  -> 36 
  | VOID  -> 37 
  | WHILE  -> 38 
  | FOR  -> 39 
  | CSTSTRING _ -> 40 
  | NAME _ -> 41 
  | CSTINT _ -> 42 
  | CSTBOOL _ -> 43 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_LPAR 
  | 2 -> TOKEN_RPAR 
  | 3 -> TOKEN_LBRACE 
  | 4 -> TOKEN_RBRACE 
  | 5 -> TOKEN_LBRACK 
  | 6 -> TOKEN_RBRACK 
  | 7 -> TOKEN_SEMI 
  | 8 -> TOKEN_COMMA 
  | 9 -> TOKEN_ASSIGN 
  | 10 -> TOKEN_AMP 
  | 11 -> TOKEN_PREINC 
  | 12 -> TOKEN_PREDEC 
  | 13 -> TOKEN_NOT 
  | 14 -> TOKEN_SEQOR 
  | 15 -> TOKEN_SEQAND 
  | 16 -> TOKEN_EQ 
  | 17 -> TOKEN_NE 
  | 18 -> TOKEN_GT 
  | 19 -> TOKEN_LT 
  | 20 -> TOKEN_GE 
  | 21 -> TOKEN_LE 
  | 22 -> TOKEN_PLUS 
  | 23 -> TOKEN_MINUS 
  | 24 -> TOKEN_TIMES 
  | 25 -> TOKEN_DIV 
  | 26 -> TOKEN_MOD 
  | 27 -> TOKEN_CHAR 
  | 28 -> TOKEN_ELSE 
  | 29 -> TOKEN_IF 
  | 30 -> TOKEN_QMARK 
  | 31 -> TOKEN_COLON 
  | 32 -> TOKEN_INT 
  | 33 -> TOKEN_NULL 
  | 34 -> TOKEN_PRINT 
  | 35 -> TOKEN_PRINTLN 
  | 36 -> TOKEN_RETURN 
  | 37 -> TOKEN_VOID 
  | 38 -> TOKEN_WHILE 
  | 39 -> TOKEN_FOR 
  | 40 -> TOKEN_CSTSTRING 
  | 41 -> TOKEN_NAME 
  | 42 -> TOKEN_CSTINT 
  | 43 -> TOKEN_CSTBOOL 
  | 46 -> TOKEN_end_of_input
  | 44 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_Topdecs 
    | 3 -> NONTERM_Topdecs 
    | 4 -> NONTERM_Topdec 
    | 5 -> NONTERM_Topdec 
    | 6 -> NONTERM_Vardec 
    | 7 -> NONTERM_Vardesc 
    | 8 -> NONTERM_Vardesc 
    | 9 -> NONTERM_Vardesc 
    | 10 -> NONTERM_Vardesc 
    | 11 -> NONTERM_Vardesc 
    | 12 -> NONTERM_Fundec 
    | 13 -> NONTERM_Fundec 
    | 14 -> NONTERM_Paramdecs 
    | 15 -> NONTERM_Paramdecs 
    | 16 -> NONTERM_Paramdecs1 
    | 17 -> NONTERM_Paramdecs1 
    | 18 -> NONTERM_Block 
    | 19 -> NONTERM_StmtOrDecSeq 
    | 20 -> NONTERM_StmtOrDecSeq 
    | 21 -> NONTERM_StmtOrDecSeq 
    | 22 -> NONTERM_Stmt 
    | 23 -> NONTERM_Stmt 
    | 24 -> NONTERM_StmtM 
    | 25 -> NONTERM_StmtM 
    | 26 -> NONTERM_StmtM 
    | 27 -> NONTERM_StmtM 
    | 28 -> NONTERM_StmtM 
    | 29 -> NONTERM_StmtM 
    | 30 -> NONTERM_StmtM 
    | 31 -> NONTERM_StmtU 
    | 32 -> NONTERM_StmtU 
    | 33 -> NONTERM_StmtU 
    | 34 -> NONTERM_StmtU 
    | 35 -> NONTERM_Expr 
    | 36 -> NONTERM_Expr 
    | 37 -> NONTERM_ExprNotAccess 
    | 38 -> NONTERM_ExprNotAccess 
    | 39 -> NONTERM_ExprNotAccess 
    | 40 -> NONTERM_ExprNotAccess 
    | 41 -> NONTERM_ExprNotAccess 
    | 42 -> NONTERM_ExprNotAccess 
    | 43 -> NONTERM_ExprNotAccess 
    | 44 -> NONTERM_ExprNotAccess 
    | 45 -> NONTERM_ExprNotAccess 
    | 46 -> NONTERM_ExprNotAccess 
    | 47 -> NONTERM_ExprNotAccess 
    | 48 -> NONTERM_ExprNotAccess 
    | 49 -> NONTERM_ExprNotAccess 
    | 50 -> NONTERM_ExprNotAccess 
    | 51 -> NONTERM_ExprNotAccess 
    | 52 -> NONTERM_ExprNotAccess 
    | 53 -> NONTERM_ExprNotAccess 
    | 54 -> NONTERM_ExprNotAccess 
    | 55 -> NONTERM_ExprNotAccess 
    | 56 -> NONTERM_ExprNotAccess 
    | 57 -> NONTERM_ExprNotAccess 
    | 58 -> NONTERM_ExprNotAccess 
    | 59 -> NONTERM_AtExprNotAccess 
    | 60 -> NONTERM_AtExprNotAccess 
    | 61 -> NONTERM_AtExprNotAccess 
    | 62 -> NONTERM_Access 
    | 63 -> NONTERM_Access 
    | 64 -> NONTERM_Access 
    | 65 -> NONTERM_Access 
    | 66 -> NONTERM_Access 
    | 67 -> NONTERM_Exprs 
    | 68 -> NONTERM_Exprs 
    | 69 -> NONTERM_Exprs1 
    | 70 -> NONTERM_Exprs1 
    | 71 -> NONTERM_Const 
    | 72 -> NONTERM_Const 
    | 73 -> NONTERM_Const 
    | 74 -> NONTERM_Const 
    | 75 -> NONTERM_Type 
    | 76 -> NONTERM_Type 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 46 
let _fsyacc_tagOfErrorTerminal = 44

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | SEMI  -> "SEMI" 
  | COMMA  -> "COMMA" 
  | ASSIGN  -> "ASSIGN" 
  | AMP  -> "AMP" 
  | PREINC  -> "PREINC" 
  | PREDEC  -> "PREDEC" 
  | NOT  -> "NOT" 
  | SEQOR  -> "SEQOR" 
  | SEQAND  -> "SEQAND" 
  | EQ  -> "EQ" 
  | NE  -> "NE" 
  | GT  -> "GT" 
  | LT  -> "LT" 
  | GE  -> "GE" 
  | LE  -> "LE" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | MOD  -> "MOD" 
  | CHAR  -> "CHAR" 
  | ELSE  -> "ELSE" 
  | IF  -> "IF" 
  | QMARK  -> "QMARK" 
  | COLON  -> "COLON" 
  | INT  -> "INT" 
  | NULL  -> "NULL" 
  | PRINT  -> "PRINT" 
  | PRINTLN  -> "PRINTLN" 
  | RETURN  -> "RETURN" 
  | VOID  -> "VOID" 
  | WHILE  -> "WHILE" 
  | FOR  -> "FOR" 
  | CSTSTRING _ -> "CSTSTRING" 
  | NAME _ -> "NAME" 
  | CSTINT _ -> "CSTINT" 
  | CSTBOOL _ -> "CSTBOOL" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | AMP  -> (null : System.Object) 
  | PREINC  -> (null : System.Object) 
  | PREDEC  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | SEQOR  -> (null : System.Object) 
  | SEQAND  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | CHAR  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | QMARK  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | INT  -> (null : System.Object) 
  | NULL  -> (null : System.Object) 
  | PRINT  -> (null : System.Object) 
  | PRINTLN  -> (null : System.Object) 
  | RETURN  -> (null : System.Object) 
  | VOID  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | FOR  -> (null : System.Object) 
  | CSTSTRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTINT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTBOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 2us; 65535us; 0us; 2us; 4us; 5us; 2us; 65535us; 0us; 4us; 4us; 4us; 8us; 65535us; 0us; 6us; 4us; 6us; 25us; 34us; 29us; 34us; 35us; 34us; 37us; 42us; 40us; 42us; 43us; 42us; 4us; 65535us; 9us; 11us; 10us; 11us; 14us; 15us; 16us; 17us; 2us; 65535us; 0us; 8us; 4us; 8us; 2us; 65535us; 25us; 26us; 29us; 30us; 3us; 65535us; 25us; 33us; 29us; 33us; 35us; 36us; 9us; 65535us; 27us; 28us; 31us; 32us; 37us; 54us; 40us; 54us; 43us; 54us; 58us; 54us; 59us; 54us; 64us; 54us; 73us; 54us; 3us; 65535us; 37us; 38us; 40us; 41us; 43us; 44us; 5us; 65535us; 37us; 40us; 40us; 40us; 43us; 40us; 58us; 76us; 73us; 74us; 7us; 65535us; 37us; 45us; 40us; 45us; 43us; 45us; 58us; 46us; 59us; 60us; 64us; 65us; 73us; 45us; 7us; 65535us; 37us; 47us; 40us; 47us; 43us; 47us; 58us; 47us; 59us; 75us; 64us; 77us; 73us; 47us; 35us; 65535us; 37us; 48us; 40us; 48us; 43us; 48us; 50us; 52us; 56us; 57us; 58us; 48us; 59us; 48us; 62us; 63us; 64us; 48us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 48us; 83us; 84us; 86us; 111us; 89us; 90us; 91us; 92us; 112us; 94us; 113us; 95us; 114us; 96us; 115us; 97us; 116us; 98us; 117us; 99us; 118us; 100us; 119us; 101us; 120us; 102us; 121us; 103us; 122us; 104us; 123us; 105us; 124us; 106us; 129us; 108us; 130us; 109us; 132us; 107us; 143us; 110us; 146us; 111us; 35us; 65535us; 37us; 80us; 40us; 80us; 43us; 80us; 50us; 80us; 56us; 80us; 58us; 80us; 59us; 80us; 62us; 80us; 64us; 80us; 67us; 80us; 69us; 80us; 71us; 80us; 73us; 80us; 83us; 80us; 86us; 80us; 89us; 80us; 91us; 80us; 112us; 80us; 113us; 80us; 114us; 80us; 115us; 80us; 116us; 80us; 117us; 80us; 118us; 80us; 119us; 80us; 120us; 80us; 121us; 80us; 122us; 80us; 123us; 80us; 124us; 80us; 129us; 80us; 130us; 80us; 132us; 81us; 143us; 80us; 146us; 80us; 36us; 65535us; 37us; 82us; 40us; 82us; 43us; 82us; 50us; 82us; 56us; 82us; 58us; 82us; 59us; 82us; 62us; 82us; 64us; 82us; 67us; 82us; 69us; 82us; 71us; 82us; 73us; 82us; 83us; 82us; 86us; 82us; 89us; 82us; 91us; 82us; 112us; 82us; 113us; 82us; 114us; 82us; 115us; 82us; 116us; 82us; 117us; 82us; 118us; 82us; 119us; 82us; 120us; 82us; 121us; 82us; 122us; 82us; 123us; 82us; 124us; 82us; 129us; 82us; 130us; 82us; 132us; 82us; 140us; 142us; 143us; 82us; 146us; 82us; 40us; 65535us; 37us; 79us; 40us; 79us; 43us; 79us; 50us; 79us; 56us; 79us; 58us; 79us; 59us; 79us; 62us; 79us; 64us; 79us; 67us; 79us; 69us; 79us; 71us; 79us; 73us; 79us; 83us; 79us; 86us; 79us; 89us; 79us; 91us; 79us; 112us; 79us; 113us; 79us; 114us; 79us; 115us; 79us; 116us; 79us; 117us; 79us; 118us; 79us; 119us; 79us; 120us; 79us; 121us; 79us; 122us; 79us; 123us; 79us; 124us; 79us; 125us; 126us; 127us; 128us; 129us; 79us; 130us; 79us; 132us; 78us; 134us; 135us; 137us; 138us; 140us; 141us; 143us; 79us; 146us; 79us; 1us; 65535us; 86us; 87us; 2us; 65535us; 86us; 145us; 146us; 147us; 36us; 65535us; 37us; 131us; 40us; 131us; 43us; 131us; 50us; 131us; 56us; 131us; 58us; 131us; 59us; 131us; 62us; 131us; 64us; 131us; 67us; 131us; 69us; 131us; 71us; 131us; 73us; 131us; 83us; 131us; 86us; 131us; 89us; 131us; 91us; 131us; 112us; 131us; 113us; 131us; 114us; 131us; 115us; 131us; 116us; 131us; 117us; 131us; 118us; 131us; 119us; 131us; 120us; 131us; 121us; 131us; 122us; 131us; 123us; 131us; 124us; 131us; 129us; 131us; 130us; 131us; 132us; 131us; 140us; 131us; 143us; 131us; 146us; 131us; 8us; 65535us; 0us; 10us; 4us; 10us; 25us; 9us; 29us; 9us; 35us; 9us; 37us; 9us; 40us; 9us; 43us; 9us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 6us; 9us; 18us; 23us; 26us; 29us; 33us; 43us; 47us; 53us; 61us; 69us; 105us; 141us; 178us; 219us; 221us; 224us; 261us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 5us; 1us; 6us; 2us; 6us; 13us; 3us; 6us; 10us; 11us; 1us; 7us; 2us; 7us; 13us; 1us; 8us; 3us; 8us; 10us; 11us; 1us; 9us; 3us; 9us; 10us; 11us; 1us; 9us; 2us; 10us; 11us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 15us; 2us; 16us; 17us; 1us; 17us; 1us; 17us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 20us; 1us; 20us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 22us; 3us; 22us; 28us; 31us; 1us; 23us; 15us; 24us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 58us; 1us; 24us; 2us; 25us; 26us; 1us; 25us; 15us; 26us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 58us; 1us; 26us; 1us; 27us; 3us; 28us; 31us; 32us; 3us; 28us; 31us; 32us; 17us; 28us; 31us; 32us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 58us; 3us; 28us; 31us; 32us; 2us; 28us; 31us; 1us; 28us; 2us; 29us; 33us; 2us; 29us; 33us; 16us; 29us; 33us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 58us; 2us; 29us; 33us; 1us; 29us; 2us; 30us; 34us; 2us; 30us; 34us; 16us; 30us; 34us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 58us; 2us; 30us; 34us; 16us; 30us; 34us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 58us; 2us; 30us; 34us; 16us; 30us; 34us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 58us; 2us; 30us; 34us; 2us; 30us; 34us; 1us; 31us; 1us; 32us; 1us; 33us; 4us; 35us; 38us; 63us; 66us; 3us; 35us; 38us; 66us; 1us; 36us; 2us; 36us; 60us; 1us; 37us; 1us; 38us; 15us; 38us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 58us; 2us; 39us; 62us; 1us; 39us; 1us; 39us; 1us; 39us; 1us; 40us; 15us; 40us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 58us; 1us; 41us; 15us; 41us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 58us; 1us; 42us; 15us; 43us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 58us; 15us; 43us; 44us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 58us; 15us; 43us; 44us; 45us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 58us; 15us; 43us; 44us; 45us; 46us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 58us; 15us; 43us; 44us; 45us; 46us; 47us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 58us; 15us; 43us; 44us; 45us; 46us; 47us; 48us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 58us; 15us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 58us; 15us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 50us; 51us; 52us; 53us; 54us; 55us; 58us; 15us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 51us; 52us; 53us; 54us; 55us; 58us; 15us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 52us; 53us; 54us; 55us; 58us; 15us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 53us; 54us; 55us; 58us; 15us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 54us; 55us; 58us; 15us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 55us; 58us; 14us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 58us; 15us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 58us; 58us; 15us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 58us; 58us; 15us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 58us; 66us; 16us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 58us; 69us; 70us; 1us; 43us; 1us; 44us; 1us; 45us; 1us; 46us; 1us; 47us; 1us; 48us; 1us; 49us; 1us; 50us; 1us; 51us; 1us; 52us; 1us; 53us; 1us; 54us; 1us; 55us; 1us; 56us; 2us; 56us; 66us; 1us; 57us; 2us; 57us; 66us; 1us; 58us; 1us; 58us; 1us; 59us; 2us; 60us; 63us; 1us; 60us; 1us; 61us; 2us; 61us; 66us; 1us; 62us; 1us; 63us; 2us; 63us; 66us; 1us; 63us; 2us; 64us; 65us; 2us; 64us; 66us; 1us; 65us; 1us; 66us; 1us; 66us; 1us; 68us; 1us; 70us; 1us; 70us; 1us; 71us; 1us; 72us; 1us; 73us; 1us; 73us; 1us; 74us; 1us; 75us; 1us; 76us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 18us; 20us; 23us; 27us; 29us; 32us; 34us; 38us; 40us; 44us; 46us; 49us; 51us; 53us; 55us; 57us; 59us; 61us; 63us; 65us; 67us; 69us; 71us; 73us; 75us; 77us; 80us; 82us; 84us; 86us; 88us; 90us; 92us; 94us; 96us; 98us; 100us; 102us; 106us; 108us; 124us; 126us; 129us; 131us; 147us; 149us; 151us; 155us; 159us; 177us; 181us; 184us; 186us; 189us; 192us; 209us; 212us; 214us; 217us; 220us; 237us; 240us; 257us; 260us; 277us; 280us; 283us; 285us; 287us; 289us; 294us; 298us; 300us; 303us; 305us; 307us; 323us; 326us; 328us; 330us; 332us; 334us; 350us; 352us; 368us; 370us; 386us; 402us; 418us; 434us; 450us; 466us; 482us; 498us; 514us; 530us; 546us; 562us; 578us; 593us; 609us; 625us; 641us; 658us; 660us; 662us; 664us; 666us; 668us; 670us; 672us; 674us; 676us; 678us; 680us; 682us; 684us; 686us; 689us; 691us; 694us; 696us; 698us; 700us; 703us; 705us; 707us; 710us; 712us; 714us; 717us; 719us; 722us; 725us; 727us; 729us; 731us; 733us; 735us; 737us; 739us; 741us; 743us; 745us; 747us; 749us; |]
let _fsyacc_action_rows = 155
let _fsyacc_actionTableElements = [|3us; 16386us; 27us; 154us; 32us; 153us; 37us; 23us; 0us; 49152us; 1us; 32768us; 0us; 3us; 0us; 16385us; 3us; 16386us; 27us; 154us; 32us; 153us; 37us; 23us; 0us; 16387us; 1us; 32768us; 7us; 7us; 0us; 16388us; 0us; 16389us; 3us; 32768us; 1us; 16us; 24us; 14us; 41us; 12us; 3us; 32768us; 1us; 16us; 24us; 14us; 41us; 13us; 1us; 16390us; 5us; 19us; 0us; 16391us; 1us; 16391us; 1us; 29us; 3us; 32768us; 1us; 16us; 24us; 14us; 41us; 12us; 1us; 16392us; 5us; 19us; 3us; 32768us; 1us; 16us; 24us; 14us; 41us; 12us; 2us; 32768us; 2us; 18us; 5us; 19us; 0us; 16393us; 2us; 32768us; 6us; 20us; 42us; 21us; 0us; 16394us; 1us; 32768us; 6us; 22us; 0us; 16395us; 1us; 32768us; 41us; 24us; 1us; 32768us; 1us; 25us; 2us; 16398us; 27us; 154us; 32us; 153us; 1us; 32768us; 2us; 27us; 1us; 32768us; 3us; 37us; 0us; 16396us; 2us; 16398us; 27us; 154us; 32us; 153us; 1us; 32768us; 2us; 31us; 1us; 32768us; 3us; 37us; 0us; 16397us; 0us; 16399us; 1us; 16400us; 8us; 35us; 2us; 32768us; 27us; 154us; 32us; 153us; 0us; 16401us; 20us; 16403us; 1us; 132us; 3us; 37us; 10us; 134us; 11us; 125us; 12us; 127us; 13us; 89us; 23us; 150us; 24us; 140us; 27us; 154us; 29us; 55us; 32us; 153us; 33us; 152us; 34us; 91us; 35us; 93us; 36us; 50us; 38us; 61us; 39us; 66us; 41us; 85us; 42us; 148us; 43us; 149us; 1us; 32768us; 4us; 39us; 0us; 16402us; 20us; 16403us; 1us; 132us; 3us; 37us; 10us; 134us; 11us; 125us; 12us; 127us; 13us; 89us; 23us; 150us; 24us; 140us; 27us; 154us; 29us; 55us; 32us; 153us; 33us; 152us; 34us; 91us; 35us; 93us; 36us; 50us; 38us; 61us; 39us; 66us; 41us; 85us; 42us; 148us; 43us; 149us; 0us; 16404us; 1us; 32768us; 7us; 43us; 20us; 16403us; 1us; 132us; 3us; 37us; 10us; 134us; 11us; 125us; 12us; 127us; 13us; 89us; 23us; 150us; 24us; 140us; 27us; 154us; 29us; 55us; 32us; 153us; 33us; 152us; 34us; 91us; 35us; 93us; 36us; 50us; 38us; 61us; 39us; 66us; 41us; 85us; 42us; 148us; 43us; 149us; 0us; 16405us; 0us; 16406us; 1us; 16406us; 28us; 59us; 0us; 16407us; 15us; 32768us; 7us; 49us; 14us; 124us; 15us; 123us; 16us; 117us; 17us; 118us; 18us; 119us; 19us; 120us; 20us; 121us; 21us; 122us; 22us; 112us; 23us; 113us; 24us; 114us; 25us; 115us; 26us; 116us; 30us; 129us; 0us; 16408us; 14us; 32768us; 1us; 132us; 7us; 51us; 10us; 134us; 11us; 125us; 12us; 127us; 13us; 89us; 23us; 150us; 24us; 140us; 33us; 152us; 34us; 91us; 35us; 93us; 41us; 85us; 42us; 148us; 43us; 149us; 0us; 16409us; 15us; 32768us; 7us; 53us; 14us; 124us; 15us; 123us; 16us; 117us; 17us; 118us; 18us; 119us; 19us; 120us; 20us; 121us; 21us; 122us; 22us; 112us; 23us; 113us; 24us; 114us; 25us; 115us; 26us; 116us; 30us; 129us; 0us; 16410us; 0us; 16411us; 1us; 32768us; 1us; 56us; 13us; 32768us; 1us; 132us; 10us; 134us; 11us; 125us; 12us; 127us; 13us; 89us; 23us; 150us; 24us; 140us; 33us; 152us; 34us; 91us; 35us; 93us; 41us; 85us; 42us; 148us; 43us; 149us; 15us; 32768us; 2us; 58us; 14us; 124us; 15us; 123us; 16us; 117us; 17us; 118us; 18us; 119us; 19us; 120us; 20us; 121us; 21us; 122us; 22us; 112us; 23us; 113us; 24us; 114us; 25us; 115us; 26us; 116us; 30us; 129us; 18us; 32768us; 1us; 132us; 3us; 37us; 10us; 134us; 11us; 125us; 12us; 127us; 13us; 89us; 23us; 150us; 24us; 140us; 29us; 55us; 33us; 152us; 34us; 91us; 35us; 93us; 36us; 50us; 38us; 61us; 39us; 66us; 41us; 85us; 42us; 148us; 43us; 149us; 18us; 32768us; 1us; 132us; 3us; 37us; 10us; 134us; 11us; 125us; 12us; 127us; 13us; 89us; 23us; 150us; 24us; 140us; 29us; 55us; 33us; 152us; 34us; 91us; 35us; 93us; 36us; 50us; 38us; 61us; 39us; 66us; 41us; 85us; 42us; 148us; 43us; 149us; 0us; 16412us; 1us; 32768us; 1us; 62us; 13us; 32768us; 1us; 132us; 10us; 134us; 11us; 125us; 12us; 127us; 13us; 89us; 23us; 150us; 24us; 140us; 33us; 152us; 34us; 91us; 35us; 93us; 41us; 85us; 42us; 148us; 43us; 149us; 15us; 32768us; 2us; 64us; 14us; 124us; 15us; 123us; 16us; 117us; 17us; 118us; 18us; 119us; 19us; 120us; 20us; 121us; 21us; 122us; 22us; 112us; 23us; 113us; 24us; 114us; 25us; 115us; 26us; 116us; 30us; 129us; 18us; 32768us; 1us; 132us; 3us; 37us; 10us; 134us; 11us; 125us; 12us; 127us; 13us; 89us; 23us; 150us; 24us; 140us; 29us; 55us; 33us; 152us; 34us; 91us; 35us; 93us; 36us; 50us; 38us; 61us; 39us; 66us; 41us; 85us; 42us; 148us; 43us; 149us; 0us; 16413us; 1us; 32768us; 1us; 67us; 13us; 32768us; 1us; 132us; 10us; 134us; 11us; 125us; 12us; 127us; 13us; 89us; 23us; 150us; 24us; 140us; 33us; 152us; 34us; 91us; 35us; 93us; 41us; 85us; 42us; 148us; 43us; 149us; 15us; 32768us; 7us; 69us; 14us; 124us; 15us; 123us; 16us; 117us; 17us; 118us; 18us; 119us; 19us; 120us; 20us; 121us; 21us; 122us; 22us; 112us; 23us; 113us; 24us; 114us; 25us; 115us; 26us; 116us; 30us; 129us; 13us; 32768us; 1us; 132us; 10us; 134us; 11us; 125us; 12us; 127us; 13us; 89us; 23us; 150us; 24us; 140us; 33us; 152us; 34us; 91us; 35us; 93us; 41us; 85us; 42us; 148us; 43us; 149us; 15us; 32768us; 7us; 71us; 14us; 124us; 15us; 123us; 16us; 117us; 17us; 118us; 18us; 119us; 19us; 120us; 20us; 121us; 21us; 122us; 22us; 112us; 23us; 113us; 24us; 114us; 25us; 115us; 26us; 116us; 30us; 129us; 13us; 32768us; 1us; 132us; 10us; 134us; 11us; 125us; 12us; 127us; 13us; 89us; 23us; 150us; 24us; 140us; 33us; 152us; 34us; 91us; 35us; 93us; 41us; 85us; 42us; 148us; 43us; 149us; 15us; 32768us; 2us; 73us; 14us; 124us; 15us; 123us; 16us; 117us; 17us; 118us; 18us; 119us; 19us; 120us; 20us; 121us; 21us; 122us; 22us; 112us; 23us; 113us; 24us; 114us; 25us; 115us; 26us; 116us; 30us; 129us; 18us; 32768us; 1us; 132us; 3us; 37us; 10us; 134us; 11us; 125us; 12us; 127us; 13us; 89us; 23us; 150us; 24us; 140us; 29us; 55us; 33us; 152us; 34us; 91us; 35us; 93us; 36us; 50us; 38us; 61us; 39us; 66us; 41us; 85us; 42us; 148us; 43us; 149us; 0us; 16414us; 0us; 16415us; 0us; 16416us; 0us; 16417us; 3us; 16419us; 2us; 139us; 5us; 143us; 9us; 83us; 2us; 16419us; 5us; 143us; 9us; 83us; 0us; 16420us; 1us; 16420us; 2us; 133us; 0us; 16421us; 13us; 32768us; 1us; 132us; 10us; 134us; 11us; 125us; 12us; 127us; 13us; 89us; 23us; 150us; 24us; 140us; 33us; 152us; 34us; 91us; 35us; 93us; 41us; 85us; 42us; 148us; 43us; 149us; 14us; 16422us; 14us; 124us; 15us; 123us; 16us; 117us; 17us; 118us; 18us; 119us; 19us; 120us; 20us; 121us; 21us; 122us; 22us; 112us; 23us; 113us; 24us; 114us; 25us; 115us; 26us; 116us; 30us; 129us; 1us; 16446us; 1us; 86us; 13us; 16451us; 1us; 132us; 10us; 134us; 11us; 125us; 12us; 127us; 13us; 89us; 23us; 150us; 24us; 140us; 33us; 152us; 34us; 91us; 35us; 93us; 41us; 85us; 42us; 148us; 43us; 149us; 1us; 32768us; 2us; 88us; 0us; 16423us; 13us; 32768us; 1us; 132us; 10us; 134us; 11us; 125us; 12us; 127us; 13us; 89us; 23us; 150us; 24us; 140us; 33us; 152us; 34us; 91us; 35us; 93us; 41us; 85us; 42us; 148us; 43us; 149us; 0us; 16424us; 13us; 32768us; 1us; 132us; 10us; 134us; 11us; 125us; 12us; 127us; 13us; 89us; 23us; 150us; 24us; 140us; 33us; 152us; 34us; 91us; 35us; 93us; 41us; 85us; 42us; 148us; 43us; 149us; 14us; 16425us; 14us; 124us; 15us; 123us; 16us; 117us; 17us; 118us; 18us; 119us; 19us; 120us; 20us; 121us; 21us; 122us; 22us; 112us; 23us; 113us; 24us; 114us; 25us; 115us; 26us; 116us; 30us; 129us; 0us; 16426us; 3us; 16427us; 24us; 114us; 25us; 115us; 26us; 116us; 3us; 16428us; 24us; 114us; 25us; 115us; 26us; 116us; 0us; 16429us; 0us; 16430us; 0us; 16431us; 9us; 16432us; 18us; 119us; 19us; 120us; 20us; 121us; 21us; 122us; 22us; 112us; 23us; 113us; 24us; 114us; 25us; 115us; 26us; 116us; 9us; 16433us; 18us; 119us; 19us; 120us; 20us; 121us; 21us; 122us; 22us; 112us; 23us; 113us; 24us; 114us; 25us; 115us; 26us; 116us; 5us; 16434us; 22us; 112us; 23us; 113us; 24us; 114us; 25us; 115us; 26us; 116us; 5us; 16435us; 22us; 112us; 23us; 113us; 24us; 114us; 25us; 115us; 26us; 116us; 5us; 16436us; 22us; 112us; 23us; 113us; 24us; 114us; 25us; 115us; 26us; 116us; 5us; 16437us; 22us; 112us; 23us; 113us; 24us; 114us; 25us; 115us; 26us; 116us; 11us; 16438us; 16us; 117us; 17us; 118us; 18us; 119us; 19us; 120us; 20us; 121us; 21us; 122us; 22us; 112us; 23us; 113us; 24us; 114us; 25us; 115us; 26us; 116us; 12us; 16439us; 15us; 123us; 16us; 117us; 17us; 118us; 18us; 119us; 19us; 120us; 20us; 121us; 21us; 122us; 22us; 112us; 23us; 113us; 24us; 114us; 25us; 115us; 26us; 116us; 14us; 32768us; 14us; 124us; 15us; 123us; 16us; 117us; 17us; 118us; 18us; 119us; 19us; 120us; 20us; 121us; 21us; 122us; 22us; 112us; 23us; 113us; 24us; 114us; 25us; 115us; 26us; 116us; 30us; 129us; 15us; 32768us; 14us; 124us; 15us; 123us; 16us; 117us; 17us; 118us; 18us; 119us; 19us; 120us; 20us; 121us; 21us; 122us; 22us; 112us; 23us; 113us; 24us; 114us; 25us; 115us; 26us; 116us; 30us; 129us; 31us; 130us; 13us; 16442us; 14us; 124us; 15us; 123us; 16us; 117us; 17us; 118us; 18us; 119us; 19us; 120us; 20us; 121us; 21us; 122us; 22us; 112us; 23us; 113us; 24us; 114us; 25us; 115us; 26us; 116us; 15us; 32768us; 6us; 144us; 14us; 124us; 15us; 123us; 16us; 117us; 17us; 118us; 18us; 119us; 19us; 120us; 20us; 121us; 21us; 122us; 22us; 112us; 23us; 113us; 24us; 114us; 25us; 115us; 26us; 116us; 30us; 129us; 15us; 16453us; 8us; 146us; 14us; 124us; 15us; 123us; 16us; 117us; 17us; 118us; 18us; 119us; 19us; 120us; 20us; 121us; 21us; 122us; 22us; 112us; 23us; 113us; 24us; 114us; 25us; 115us; 26us; 116us; 30us; 129us; 13us; 32768us; 1us; 132us; 10us; 134us; 11us; 125us; 12us; 127us; 13us; 89us; 23us; 150us; 24us; 140us; 33us; 152us; 34us; 91us; 35us; 93us; 41us; 85us; 42us; 148us; 43us; 149us; 13us; 32768us; 1us; 132us; 10us; 134us; 11us; 125us; 12us; 127us; 13us; 89us; 23us; 150us; 24us; 140us; 33us; 152us; 34us; 91us; 35us; 93us; 41us; 85us; 42us; 148us; 43us; 149us; 13us; 32768us; 1us; 132us; 10us; 134us; 11us; 125us; 12us; 127us; 13us; 89us; 23us; 150us; 24us; 140us; 33us; 152us; 34us; 91us; 35us; 93us; 41us; 85us; 42us; 148us; 43us; 149us; 13us; 32768us; 1us; 132us; 10us; 134us; 11us; 125us; 12us; 127us; 13us; 89us; 23us; 150us; 24us; 140us; 33us; 152us; 34us; 91us; 35us; 93us; 41us; 85us; 42us; 148us; 43us; 149us; 13us; 32768us; 1us; 132us; 10us; 134us; 11us; 125us; 12us; 127us; 13us; 89us; 23us; 150us; 24us; 140us; 33us; 152us; 34us; 91us; 35us; 93us; 41us; 85us; 42us; 148us; 43us; 149us; 13us; 32768us; 1us; 132us; 10us; 134us; 11us; 125us; 12us; 127us; 13us; 89us; 23us; 150us; 24us; 140us; 33us; 152us; 34us; 91us; 35us; 93us; 41us; 85us; 42us; 148us; 43us; 149us; 13us; 32768us; 1us; 132us; 10us; 134us; 11us; 125us; 12us; 127us; 13us; 89us; 23us; 150us; 24us; 140us; 33us; 152us; 34us; 91us; 35us; 93us; 41us; 85us; 42us; 148us; 43us; 149us; 13us; 32768us; 1us; 132us; 10us; 134us; 11us; 125us; 12us; 127us; 13us; 89us; 23us; 150us; 24us; 140us; 33us; 152us; 34us; 91us; 35us; 93us; 41us; 85us; 42us; 148us; 43us; 149us; 13us; 32768us; 1us; 132us; 10us; 134us; 11us; 125us; 12us; 127us; 13us; 89us; 23us; 150us; 24us; 140us; 33us; 152us; 34us; 91us; 35us; 93us; 41us; 85us; 42us; 148us; 43us; 149us; 13us; 32768us; 1us; 132us; 10us; 134us; 11us; 125us; 12us; 127us; 13us; 89us; 23us; 150us; 24us; 140us; 33us; 152us; 34us; 91us; 35us; 93us; 41us; 85us; 42us; 148us; 43us; 149us; 13us; 32768us; 1us; 132us; 10us; 134us; 11us; 125us; 12us; 127us; 13us; 89us; 23us; 150us; 24us; 140us; 33us; 152us; 34us; 91us; 35us; 93us; 41us; 85us; 42us; 148us; 43us; 149us; 13us; 32768us; 1us; 132us; 10us; 134us; 11us; 125us; 12us; 127us; 13us; 89us; 23us; 150us; 24us; 140us; 33us; 152us; 34us; 91us; 35us; 93us; 41us; 85us; 42us; 148us; 43us; 149us; 13us; 32768us; 1us; 132us; 10us; 134us; 11us; 125us; 12us; 127us; 13us; 89us; 23us; 150us; 24us; 140us; 33us; 152us; 34us; 91us; 35us; 93us; 41us; 85us; 42us; 148us; 43us; 149us; 3us; 32768us; 1us; 137us; 24us; 140us; 41us; 136us; 1us; 16440us; 5us; 143us; 3us; 32768us; 1us; 137us; 24us; 140us; 41us; 136us; 1us; 16441us; 5us; 143us; 13us; 32768us; 1us; 132us; 10us; 134us; 11us; 125us; 12us; 127us; 13us; 89us; 23us; 150us; 24us; 140us; 33us; 152us; 34us; 91us; 35us; 93us; 41us; 85us; 42us; 148us; 43us; 149us; 13us; 32768us; 1us; 132us; 10us; 134us; 11us; 125us; 12us; 127us; 13us; 89us; 23us; 150us; 24us; 140us; 33us; 152us; 34us; 91us; 35us; 93us; 41us; 85us; 42us; 148us; 43us; 149us; 0us; 16443us; 13us; 32768us; 1us; 132us; 10us; 134us; 11us; 125us; 12us; 127us; 13us; 89us; 23us; 150us; 24us; 140us; 33us; 152us; 34us; 91us; 35us; 93us; 41us; 85us; 42us; 148us; 43us; 149us; 0us; 16444us; 3us; 32768us; 1us; 137us; 24us; 140us; 41us; 136us; 1us; 16445us; 5us; 143us; 0us; 16446us; 3us; 32768us; 1us; 137us; 24us; 140us; 41us; 136us; 2us; 32768us; 2us; 139us; 5us; 143us; 0us; 16447us; 8us; 32768us; 1us; 132us; 10us; 134us; 23us; 150us; 24us; 140us; 33us; 152us; 41us; 136us; 42us; 148us; 43us; 149us; 1us; 16448us; 5us; 143us; 0us; 16449us; 13us; 32768us; 1us; 132us; 10us; 134us; 11us; 125us; 12us; 127us; 13us; 89us; 23us; 150us; 24us; 140us; 33us; 152us; 34us; 91us; 35us; 93us; 41us; 85us; 42us; 148us; 43us; 149us; 0us; 16450us; 0us; 16452us; 13us; 32768us; 1us; 132us; 10us; 134us; 11us; 125us; 12us; 127us; 13us; 89us; 23us; 150us; 24us; 140us; 33us; 152us; 34us; 91us; 35us; 93us; 41us; 85us; 42us; 148us; 43us; 149us; 0us; 16454us; 0us; 16455us; 0us; 16456us; 1us; 32768us; 42us; 151us; 0us; 16457us; 0us; 16458us; 0us; 16459us; 0us; 16460us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 4us; 5us; 7us; 8us; 12us; 13us; 15us; 16us; 17us; 21us; 25us; 27us; 28us; 30us; 34us; 36us; 40us; 43us; 44us; 47us; 48us; 50us; 51us; 53us; 55us; 58us; 60us; 62us; 63us; 66us; 68us; 70us; 71us; 72us; 74us; 77us; 78us; 99us; 101us; 102us; 123us; 124us; 126us; 147us; 148us; 149us; 151us; 152us; 168us; 169us; 184us; 185us; 201us; 202us; 203us; 205us; 219us; 235us; 254us; 273us; 274us; 276us; 290us; 306us; 325us; 326us; 328us; 342us; 358us; 372us; 388us; 402us; 418us; 437us; 438us; 439us; 440us; 441us; 445us; 448us; 449us; 451us; 452us; 466us; 481us; 483us; 497us; 499us; 500us; 514us; 515us; 529us; 544us; 545us; 549us; 553us; 554us; 555us; 556us; 566us; 576us; 582us; 588us; 594us; 600us; 612us; 625us; 640us; 656us; 670us; 686us; 702us; 716us; 730us; 744us; 758us; 772us; 786us; 800us; 814us; 828us; 842us; 856us; 870us; 884us; 888us; 890us; 894us; 896us; 910us; 924us; 925us; 939us; 940us; 944us; 946us; 947us; 951us; 954us; 955us; 964us; 966us; 967us; 981us; 982us; 983us; 997us; 998us; 999us; 1000us; 1002us; 1003us; 1004us; 1005us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 0us; 2us; 2us; 1us; 2us; 1us; 2us; 3us; 3us; 4us; 6us; 6us; 0us; 1us; 1us; 3us; 3us; 0us; 2us; 3us; 1us; 1us; 2us; 2us; 3us; 1us; 7us; 5us; 9us; 7us; 5us; 5us; 9us; 1us; 1us; 1us; 3us; 4us; 2us; 2us; 1us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 2us; 2us; 5us; 1us; 3us; 2us; 1us; 3us; 2us; 2us; 4us; 0us; 1us; 1us; 3us; 1us; 1us; 2us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 4us; 5us; 5us; 5us; 5us; 5us; 6us; 6us; 7us; 7us; 8us; 8us; 9us; 10us; 10us; 10us; 11us; 11us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 13us; 13us; 13us; 13us; 14us; 14us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 16us; 16us; 16us; 17us; 17us; 17us; 17us; 17us; 18us; 18us; 19us; 19us; 20us; 20us; 20us; 20us; 21us; 21us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 16387us; 65535us; 16388us; 16389us; 65535us; 65535us; 65535us; 16391us; 65535us; 65535us; 65535us; 65535us; 65535us; 16393us; 65535us; 16394us; 65535us; 16395us; 65535us; 65535us; 65535us; 65535us; 65535us; 16396us; 65535us; 65535us; 65535us; 16397us; 16399us; 65535us; 65535us; 16401us; 65535us; 65535us; 16402us; 65535us; 16404us; 65535us; 65535us; 16405us; 16406us; 65535us; 16407us; 65535us; 16408us; 65535us; 16409us; 65535us; 16410us; 16411us; 65535us; 65535us; 65535us; 65535us; 65535us; 16412us; 65535us; 65535us; 65535us; 65535us; 16413us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16415us; 16416us; 16417us; 65535us; 65535us; 16420us; 65535us; 16421us; 65535us; 65535us; 65535us; 65535us; 65535us; 16423us; 65535us; 65535us; 65535us; 65535us; 16426us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16443us; 65535us; 16444us; 65535us; 65535us; 16446us; 65535us; 65535us; 16447us; 65535us; 65535us; 16449us; 65535us; 16450us; 16452us; 65535us; 16454us; 16455us; 16456us; 65535us; 16457us; 16458us; 16459us; 16460us; |]
let _fsyacc_reductions ()  =    [| 
# 429 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.program in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startMain));
# 438 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Topdecs in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "CPar.fsy"
                                                               Prog _1 
                   )
# 43 "CPar.fsy"
                 : Absyn.program));
# 449 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "CPar.fsy"
                                                               [] 
                   )
# 47 "CPar.fsy"
                 : 'gentype_Topdecs));
# 459 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Topdec in
            let _2 = parseState.GetInput(2) :?> 'gentype_Topdecs in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "CPar.fsy"
                                                               _1 :: _2 
                   )
# 48 "CPar.fsy"
                 : 'gentype_Topdecs));
# 471 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Vardec in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "CPar.fsy"
                                                               Vardec (fst _1, snd _1) 
                   )
# 52 "CPar.fsy"
                 : 'gentype_Topdec));
# 482 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Fundec in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "CPar.fsy"
                                                               _1 
                   )
# 53 "CPar.fsy"
                 : 'gentype_Topdec));
# 493 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Type in
            let _2 = parseState.GetInput(2) :?> 'gentype_Vardesc in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "CPar.fsy"
                                                               ((fst _2) _1, snd _2) 
                   )
# 57 "CPar.fsy"
                 : 'gentype_Vardec));
# 505 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "CPar.fsy"
                                                               ((fun t -> t), _1)                      
                   )
# 61 "CPar.fsy"
                 : 'gentype_Vardesc));
# 516 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Vardesc in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "CPar.fsy"
                                                               compose1 TypP _2                        
                   )
# 62 "CPar.fsy"
                 : 'gentype_Vardesc));
# 527 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Vardesc in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "CPar.fsy"
                                                               _2                                      
                   )
# 63 "CPar.fsy"
                 : 'gentype_Vardesc));
# 538 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Vardesc in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "CPar.fsy"
                                                               compose1 (fun t -> TypA(t, None)) _1    
                   )
# 64 "CPar.fsy"
                 : 'gentype_Vardesc));
# 549 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Vardesc in
            let _3 = parseState.GetInput(3) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "CPar.fsy"
                                                               compose1 (fun t -> TypA(t, Some _3)) _1 
                   )
# 65 "CPar.fsy"
                 : 'gentype_Vardesc));
# 561 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_Paramdecs in
            let _6 = parseState.GetInput(6) :?> 'gentype_Block in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "CPar.fsy"
                                                               Fundec(None,     _2, _4, _6) 
                   )
# 69 "CPar.fsy"
                 : 'gentype_Fundec));
# 574 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Type in
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_Paramdecs in
            let _6 = parseState.GetInput(6) :?> 'gentype_Block in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "CPar.fsy"
                                                               Fundec(Some(_1), _2, _4, _6) 
                   )
# 70 "CPar.fsy"
                 : 'gentype_Fundec));
# 588 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "CPar.fsy"
                                                               [] 
                   )
# 74 "CPar.fsy"
                 : 'gentype_Paramdecs));
# 598 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Paramdecs1 in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "CPar.fsy"
                                                               _1 
                   )
# 75 "CPar.fsy"
                 : 'gentype_Paramdecs));
# 609 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Vardec in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "CPar.fsy"
                                                               [_1]     
                   )
# 79 "CPar.fsy"
                 : 'gentype_Paramdecs1));
# 620 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Vardec in
            let _3 = parseState.GetInput(3) :?> 'gentype_Paramdecs1 in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "CPar.fsy"
                                                               _1 :: _3 
                   )
# 80 "CPar.fsy"
                 : 'gentype_Paramdecs1));
# 632 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_StmtOrDecSeq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "CPar.fsy"
                                                               Block _2 
                   )
# 84 "CPar.fsy"
                 : 'gentype_Block));
# 643 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "CPar.fsy"
                                                               [] 
                   )
# 88 "CPar.fsy"
                 : 'gentype_StmtOrDecSeq));
# 653 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Stmt in
            let _2 = parseState.GetInput(2) :?> 'gentype_StmtOrDecSeq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "CPar.fsy"
                                                               Stmt _1 :: _2 
                   )
# 89 "CPar.fsy"
                 : 'gentype_StmtOrDecSeq));
# 665 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Vardec in
            let _3 = parseState.GetInput(3) :?> 'gentype_StmtOrDecSeq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "CPar.fsy"
                                                               Dec (fst _1, snd _1) :: _3 
                   )
# 90 "CPar.fsy"
                 : 'gentype_StmtOrDecSeq));
# 677 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_StmtM in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "CPar.fsy"
                                                               _1 
                   )
# 94 "CPar.fsy"
                 : 'gentype_Stmt));
# 688 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_StmtU in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "CPar.fsy"
                                                               _1 
                   )
# 95 "CPar.fsy"
                 : 'gentype_Stmt));
# 699 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "CPar.fsy"
                                                               Expr(_1)             
                   )
# 99 "CPar.fsy"
                 : 'gentype_StmtM));
# 710 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "CPar.fsy"
                                                               Return None          
                   )
# 100 "CPar.fsy"
                 : 'gentype_StmtM));
# 720 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "CPar.fsy"
                                                               Return(Some(_2))     
                   )
# 101 "CPar.fsy"
                 : 'gentype_StmtM));
# 731 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Block in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "CPar.fsy"
                                                               _1                   
                   )
# 102 "CPar.fsy"
                 : 'gentype_StmtM));
# 742 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_StmtM in
            let _7 = parseState.GetInput(7) :?> 'gentype_StmtM in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "CPar.fsy"
                                                               If(_3, _5, _7)       
                   )
# 103 "CPar.fsy"
                 : 'gentype_StmtM));
# 755 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_StmtM in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "CPar.fsy"
                                                               While(_3, _5)        
                   )
# 104 "CPar.fsy"
                 : 'gentype_StmtM));
# 767 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_Expr in
            let _7 = parseState.GetInput(7) :?> 'gentype_Expr in
            let _9 = parseState.GetInput(9) :?> 'gentype_Stmt in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "CPar.fsy"
                                                                       Block [Stmt (Expr _3); Stmt (While (_5, Block [Stmt _9; Stmt (Expr _7)]))] 
                   )
# 105 "CPar.fsy"
                 : 'gentype_StmtM));
# 781 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_StmtM in
            let _7 = parseState.GetInput(7) :?> 'gentype_StmtU in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "CPar.fsy"
                                                               If(_3, _5, _7)       
                   )
# 109 "CPar.fsy"
                 : 'gentype_StmtU));
# 794 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_Stmt in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "CPar.fsy"
                                                               If(_3, _5, Block []) 
                   )
# 110 "CPar.fsy"
                 : 'gentype_StmtU));
# 806 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_StmtU in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "CPar.fsy"
                                                               While(_3, _5)        
                   )
# 111 "CPar.fsy"
                 : 'gentype_StmtU));
# 818 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_Expr in
            let _7 = parseState.GetInput(7) :?> 'gentype_Expr in
            let _9 = parseState.GetInput(9) :?> 'gentype_Stmt in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "CPar.fsy"
                                                                        Block [Stmt (Expr _3); Stmt (While (_5, Block [Stmt _9; Stmt (Expr _7)]))] 
                   )
# 112 "CPar.fsy"
                 : 'gentype_StmtU));
# 832 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Access in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "CPar.fsy"
                                                               Access _1           
                   )
# 116 "CPar.fsy"
                 : 'gentype_Expr));
# 843 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ExprNotAccess in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "CPar.fsy"
                                                               _1                  
                   )
# 117 "CPar.fsy"
                 : 'gentype_Expr));
# 854 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_AtExprNotAccess in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "CPar.fsy"
                                                               _1                  
                   )
# 121 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 865 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Access in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "CPar.fsy"
                                                               Assign(_1, _3)      
                   )
# 122 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 877 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_Exprs in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "CPar.fsy"
                                                               Call(_1, _3)        
                   )
# 123 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 889 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "CPar.fsy"
                                                               Prim1("!", _2)      
                   )
# 124 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 900 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "CPar.fsy"
                                                               Prim1("printi", _2) 
                   )
# 125 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 911 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "CPar.fsy"
                                                               Prim1("printc", nl) 
                   )
# 126 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 921 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "CPar.fsy"
                                                               Prim2("+",  _1, _3) 
                   )
# 127 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 933 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "CPar.fsy"
                                                               Prim2("-",  _1, _3) 
                   )
# 128 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 945 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "CPar.fsy"
                                                               Prim2("*",  _1, _3) 
                   )
# 129 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 957 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "CPar.fsy"
                                                               Prim2("/",  _1, _3) 
                   )
# 130 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 969 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "CPar.fsy"
                                                               Prim2("%",  _1, _3) 
                   )
# 131 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 981 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "CPar.fsy"
                                                               Prim2("==", _1, _3) 
                   )
# 132 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 993 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "CPar.fsy"
                                                               Prim2("!=", _1, _3) 
                   )
# 133 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 1005 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "CPar.fsy"
                                                               Prim2(">",  _1, _3) 
                   )
# 134 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 1017 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "CPar.fsy"
                                                               Prim2("<",  _1, _3) 
                   )
# 135 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 1029 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "CPar.fsy"
                                                               Prim2(">=", _1, _3) 
                   )
# 136 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 1041 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "CPar.fsy"
                                                               Prim2("<=", _1, _3) 
                   )
# 137 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 1053 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "CPar.fsy"
                                                               Andalso(_1, _3)     
                   )
# 138 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 1065 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "CPar.fsy"
                                                               Orelse(_1, _3)      
                   )
# 139 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 1077 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Access in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "CPar.fsy"
                                                               PreInc _2           
                   )
# 140 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 1088 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Access in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "CPar.fsy"
                                                               PreDec _2           
                   )
# 141 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 1099 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "CPar.fsy"
                                                               Ternary(_1, _3, _5)  
                   )
# 142 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 1112 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Const in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "CPar.fsy"
                                                               CstI _1             
                   )
# 146 "CPar.fsy"
                 : 'gentype_AtExprNotAccess));
# 1123 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_ExprNotAccess in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "CPar.fsy"
                                                               _2                  
                   )
# 147 "CPar.fsy"
                 : 'gentype_AtExprNotAccess));
# 1134 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Access in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "CPar.fsy"
                                                               Addr _2             
                   )
# 148 "CPar.fsy"
                 : 'gentype_AtExprNotAccess));
# 1145 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "CPar.fsy"
                                                               AccVar _1           
                   )
# 152 "CPar.fsy"
                 : 'gentype_Access));
# 1156 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Access in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "CPar.fsy"
                                                               _2                  
                   )
# 153 "CPar.fsy"
                 : 'gentype_Access));
# 1167 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Access in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "CPar.fsy"
                                                               AccDeref (Access _2)
                   )
# 154 "CPar.fsy"
                 : 'gentype_Access));
# 1178 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_AtExprNotAccess in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "CPar.fsy"
                                                               AccDeref _2         
                   )
# 155 "CPar.fsy"
                 : 'gentype_Access));
# 1189 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Access in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "CPar.fsy"
                                                               AccIndex(_1, _3)    
                   )
# 156 "CPar.fsy"
                 : 'gentype_Access));
# 1201 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "CPar.fsy"
                                                               []       
                   )
# 160 "CPar.fsy"
                 : 'gentype_Exprs));
# 1211 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Exprs1 in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "CPar.fsy"
                                                               _1       
                   )
# 161 "CPar.fsy"
                 : 'gentype_Exprs));
# 1222 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "CPar.fsy"
                                                               [_1]     
                   )
# 165 "CPar.fsy"
                 : 'gentype_Exprs1));
# 1233 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Exprs1 in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "CPar.fsy"
                                                               _1 :: _3 
                   )
# 166 "CPar.fsy"
                 : 'gentype_Exprs1));
# 1245 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "CPar.fsy"
                                                               _1       
                   )
# 170 "CPar.fsy"
                 : 'gentype_Const));
# 1256 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "CPar.fsy"
                                                               _1       
                   )
# 171 "CPar.fsy"
                 : 'gentype_Const));
# 1267 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "CPar.fsy"
                                                               - _2     
                   )
# 172 "CPar.fsy"
                 : 'gentype_Const));
# 1278 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "CPar.fsy"
                                                               -1       
                   )
# 173 "CPar.fsy"
                 : 'gentype_Const));
# 1288 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 177 "CPar.fsy"
                                                               TypI     
                   )
# 177 "CPar.fsy"
                 : 'gentype_Type));
# 1298 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 178 "CPar.fsy"
                                                               TypC     
                   )
# 178 "CPar.fsy"
                 : 'gentype_Type));
|]
# 1309 "CPar.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 47;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : Absyn.program =
    engine lexer lexbuf 0 :?> _
